<?xml version="1.0" encoding="UTF-8"?>
<project name="web4"
         default="build"
         basedir="."
         xmlns:ivy="antlib:org.apache.ivy.ant"
         xmlns:ac="antlib:net.sf.antcontrib">

    <!-- Подгружаем свойства -->
    <property file="build.properties"/>

    <!-- Пути к зависимостям проекта -->
    <path id="lombok.processor.path">
        <fileset dir="${lib.dir}">
            <include name="**/lombok-*.jar"/>
        </fileset>
    </path>
    <path id="spring.processor.path">
        <fileset dir="${lib.dir}">
            <include name="**/spring-boot-configuration-processor-*.jar"/>
        </fileset>
    </path>
    <path id="project.classpath">
        <fileset dir="${lib.dir}">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <!-- Ant‑contrib -->
    <typedef resource="net/sf/antcontrib/antlib.xml">
        <classpath>
            <pathelement location="${lib.dir}/ant-contrib-1.0b3.jar"/>
        </classpath>
    </typedef>

    <!-- Подключаем Ivy ОДНИМ ClassLoader’ом -->
    <typedef uri="antlib:org.apache.ivy.ant"
             resource="org/apache/ivy/ant/antlib.xml">
        <classpath path="${ivy.jar}"/>
    </typedef>

    <!-- Подготовка директорий -->
    <target name="init">
        <mkdir dir="${classes.dir}"/>
        <mkdir dir="${test.classes.dir}"/>
        <mkdir dir="${reports.dir}"/>
        <mkdir dir="${dist.dir}"/>
    </target>

    <!-- Очистка предыдущих сборок -->
    <target name="clean">
        <delete dir="${build.dir}"/>
        <delete dir="${dist.dir}"/>
    </target>

    <!-- Разрешение и загрузка зависимостей через Ivy -->
    <target name="resolve-deps">
        <ivy:settings file="ivysettings.xml"/>
        <ivy:resolve/>
        <ivy:retrieve
                pattern="${lib.dir}/[organisation]/[module]/[artifact]-[revision].[ext]"
                conf="default,test"/>
    </target>

    <!-- Компиляция основного кода -->
    <target name="compile" depends="init,resolve-deps">
        <javac srcdir="${src.dir}"
               destdir="${classes.dir}"
               includeantruntime="false"
               debug="true"
               source="17" target="17">
            <classpath refid="project.classpath"/>
            <compilerarg line="-parameters"/>
            <compilerarg value="-processorpath"/>
            <compilerarg
                    value="lib/org.projectlombok/lombok/lombok-1.18.30.jar:lib/org.springframework.boot/spring-boot-configuration-processor/spring-boot-configuration-processor-3.4.4.jar"/>
        </javac>
    </target>

    <!-- Сборка jar -->
    <target name="build" depends="compile">
        <jar destfile="${dist.dir}/${jar.name}"
             basedir="${classes.dir}">
            <manifest>
                <attribute name="Main-Class" value="${main.class}"/>
                <attribute name="Implementation-Version" value="${version}"/>
            </manifest>
            <zipgroupfileset dir="${lib.dir}" includes="**/*.jar"/>
        </jar>
    </target>

    <!-- Компиляция тестов -->
    <target name="compile-tests" depends="compile">
        <javac srcdir="${test.dir}"
               destdir="${test.classes.dir}"
               includeantruntime="false"
               debug="true"
               source="17" target="17">
            <classpath>
                <path refid="project.classpath"/>
                <pathelement location="${classes.dir}"/>
            </classpath>
        </javac>
    </target>

    <!-- Запуск JUnit‑тестов -->
    <target name="test" depends="compile-tests">
        <mkdir dir="${reports.dir}"/>
        <junit printsummary="yes" haltonfailure="yes" fork="true">
            <classpath>
                <pathelement location="${classes.dir}"/>
                <pathelement location="${test.classes.dir}"/>
                <fileset dir="${lib.dir}">
                    <include name="junit-4.13.2.jar"/>
                    <include name="mockito-core-*.jar"/>
                </fileset>
            </classpath>
            <batchtest todir="${reports.dir}">
                <fileset dir="${test.classes.dir}">
                    <include name="**/*Test*.class"/>
                </fileset>
            </batchtest>
            <formatter type="plain"/>
            <formatter type="xml"/>
        </junit>
    </target>

    <!-- Проигрывание музыки -->
    <target name="music" depends="build">
        <echo message="Playing ${music.file}…"/>
        <exec executable="${music.cmd}" failonerror="false">
            <arg value="${music.file}"/>
        </exec>
    </target>

    <!--   history huistory-->
    <target name="history">
        <exec executable="git" outputproperty="git.head_revision">
            <arg line="rev-parse HEAD"/>
        </exec>
        <exec executable="git" outputproperty="git.tail_revision">
            <arg line="rev-list --max-parents=0 HEAD"/>
        </exec>

        <echo message="Head revision: ${git.head_revision}"/>
        <echo message="Tail revision: ${git.tail_revision}"/>

        <var name="git.new_revision" unset="true"/>
        <exec executable="git" outputproperty="git.new_revision">
            <arg line="rev-parse HEAD~1"/>
        </exec>

        <trycatch>
            <try>
                <antcall target="compile"/>
                <var name="compile.successful" unset="true"/>
                <property name="compile.successful" value="true"/>
                <echo message="Project compiled successfully!"/>

                <sequential>
                    <exec executable="git" outputproperty="diff_output">
                        <arg line="diff ${git.head_revision} ${git.new_revision} --"/>
                    </exec>
                    <echo file="diff_output.txt" message="${diff_output}"/>
                </sequential>
            </try>

            <catch>
                <echo message="Project compilation failed!"/>
                <echo message="Checkout revision: ${git.new_revision}"/>
                <exec executable="git">
                    <arg line="reset --hard ${git.new_revision}"/>
                </exec>
                <var name="compile.successful" unset="true"/>
                <property name="compile.successful" value="false"/>
                <if>
                    <equals arg1="${git.new_revision}" arg2="${git.tail_revision}"/>
                    <then>
                        <echo message="No more revisions to checkout"/>
                    </then>
                    <else>
                        <runtarget target="history"/>
                    </else>
                </if>
            </catch>
        </trycatch>

        <exec executable="git">
            <arg line="checkout ${git.head_revision}"/>
        </exec>
    </target>
</project>